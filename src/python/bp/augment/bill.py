from bp.augment.chat import Chat
from bp.entity.ballot import DoubleMajorityBallot, DoubleMajorityBallotResult

from decimal import Decimal
from openai import OpenAI
from numpy import float64
from numpy.random import Generator
from scipy.stats import truncnorm
from typing import List


class TitleAndWording:
    """Title and wording of a bill. Entity used when generating paraphrases and
    contradictions during data augmentation with a chat model.
    """

    def __init__(self, title: str, wording: str):
        """Initialies bill text content.

        Args:
            title (str): Title of the bill.
            wording (str): Full wording of the bill.
        """
        self.title = title
        self.wording = wording


class ParaphrasesAndContradictions:
    """Alternative bill titles generated by chat model for data augmentation.
    """

    def __init__(self, paraphrases: List[TitleAndWording], contradictions: List[TitleAndWording]):
        """Initialises collection of alternative bill titles.

        Args:
            paraphrases (List[TitleAndWording]): Bill titles and wordings with
            the same meaning as the original bill, but phrased differently.
            contradictions (List[TitleAndWording]): Bill titles and wordings
            with the oppositme meaning as the original bill, phrases in a
            variety of ways.
        """
        self.paraphrases = paraphrases
        self.contradictions = contradictions


class BillAugmenter:
    """Helper class to augment ballot result data.
    """

    def __init__(self, chat: Chat, generator: Generator):
        """Initialses ballot result augmenter.

        Args:
            chat (Chat): Chat model used for generating alternative bill
            titles and wordings.
            generator (Generator): Random seed used to augment vote result and
            date information randomly.
        """
        self.chat = chat
        self.generator = generator

    def paraphrase_and_contradict(self, ballots: List[DoubleMajorityBallot]) -> List[DoubleMajorityBallot]:
        """Generates n new ballots for each ballot in ballots, with paraphrased
        or opposite meanings.

        Args:
            ballots (List[DoubleMajorityBallot]): Ballots to augment.

        Returns:
            List[DoubleMajorityBallot]: Augmented list of ballots.
        """
        self.chat.prompt(None)
        TitleAndWording("", "")
        ParaphrasesAndContradictions([], [])
        return []

    def __augment_vote(self, percentage_yes: Decimal, accepting_cantons: Decimal, flip_result: bool) -> DoubleMajorityBallotResult:
        """Generates a new vote result randomly, while either maintaining the
        result or flipping it for contradictory bill texts.

        Args:
            percentage_yes (Decimal): Share of population accepting the bill.
            accepting_cantons (Decimal): Share of cantons accepting the bill.
            flip_result (bool): Whether to flip the result.

        Returns:
            DoubleMajorityBallotResult: New ballot result.
        """
        one_hundred = Decimal(100)
        if flip_result:
            percentage_yes = one_hundred - percentage_yes
            accepting_cantons = one_hundred - accepting_cantons

        new_percentage_yes: Decimal = self.truncated_normal_distribution(
            percentage_yes)
        new_accepting_cantons: Decimal = self.truncated_normal_distribution(
            accepting_cantons)
        return DoubleMajorityBallotResult(new_percentage_yes, new_accepting_cantons)

    def truncated_normal_distribution(self, value: Decimal) -> Decimal:
        """Helper random distribution to generate new vote results without
        changing the outcome, and with values closer to the original result
        more probable that significantly different results.

        Args:
            value (Decimal): Original result, either share of population
            accepting a bill or share of cantons accepting it.

        Returns:
            Decimal: New vote result with same outcome.
        """
        fifty = Decimal(50)
        min: Decimal = fifty if value >= fifty else Decimal(0)
        max: Decimal = Decimal(100) if value >= fifty else Decimal(49.99)
        std_dev: float = 2

        min_num_std_devs_diff: float = float((min - value) / std_dev)
        max_num_std_devs_diff: float = float((max - value) / std_dev)
        value: float64 = truncnorm.rvs(
            min_num_std_devs_diff,
            max_num_std_devs_diff,
            loc=float(value),
            scale=std_dev,
            random_state=self.generator)

        return Decimal(value).quantize(Decimal("0.01"))
